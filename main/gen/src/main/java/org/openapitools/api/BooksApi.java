/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.openapitools.model.Book;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.models.PathItem.HttpMethod;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-19T20:26:27.436269835Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
@Validated
@Tag(name = "books", description = "the books API")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /books/{bookId} : Get a book by ID
     * Retrieve a book from the system.
     *
     * @param bookId The ID of the book to retrieve. (required)
     * @return A Book by ID (status code 200)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
     @Operation(
        operationId = "getBookById",
        summary = "Get a book by ID",
        description = "Retrieve a book from the system.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A Book by ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
   
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Book> getBookById(
        @Parameter(name = "bookId", description = "The ID of the book to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("bookId") BigDecimal bookId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"jkr\", \"description\" : \"description\", \"id\" : 0.8008281904610115, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /books/{bookId} : Get a book by ID
     * Retrieve a book from the system.
     *
     * @param bookId The ID of the book to retrieve. (required)
     * @return A Book by ID (status code 200)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */

    @Operation
    (
        operationId = "updateBook",
        summary = "Update book details by Id",
        description = "Update book details by Id",
        responses = {
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error"),
            @ApiResponse(responseCode = "200", description = "Updated book details")
        }
    )

    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/books/{bookId}",
        produces = { "application/json" },
        consumes = { "application/json" }  
    )

    
    default ResponseEntity<Book> updateBookById(
    @Parameter(name = "bookId", in = ParameterIn.PATH, required = true)
    @PathVariable(name = "bookId", required = true) BigDecimal bookId,
    @io.swagger.v3.oas.annotations.parameters.RequestBody(
        required = true, 
        description = "updated book details", 
        content = @Content(schema = @Schema(implementation = Book.class))
    )
    @RequestBody Book updatedBook)
    {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }



    /**
     * GET /books/ : Get a list of books
     * Retrieve all books from the system.
     *
     * @return A list of books (status code 200)
     *         or No books found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "listBooks",
        summary = "Get a list of books",
        description = "Retrieve all books from the system.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of books", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Book.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No books found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Book>> listBooks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"author\" : \"author\", \"description\" : \"description\", \"id\" : 0.8008281904610115, \"title\" : \"title\" }, { \"author\" : \"author\", \"description\" : \"description\", \"id\" : 0.8008281904610115, \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    // POST
    @Operation
    (
        operationId = "createBook",
        summary = "Create a new book",
        description = "Create a new book",
        responses = {            
            @ApiResponse(responseCode = "500", description = "Internal server error"),
            @ApiResponse(responseCode = "200", description = "Updated book details")
        }
    )

    @RequestMapping
    (
        method = RequestMethod.POST,
        value = "/books",
        produces = {"application/json"}

    )
    
    default ResponseEntity<Book> createBook(
    @io.swagger.v3.oas.annotations.parameters.RequestBody(
        required = true, 
        description = "updated book details", 
        content = @Content(schema = @Schema(implementation = Book.class))
    )
    @RequestBody Book newBook)
    {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


}
